---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
import "../styles/global.css";

export const prerender = false;
---

<Layout title="recordtime">
  <Navbar />
  <div style="min-height: 70vh; background-color: purple;">
    <div class="flex flex-col items-center justify-center min-h-screen">
      <h1 style="font-size: 30px; color: white;" class="text-center mb-5">
        State your time estimation for your study hour!
      </h1>

      <div class="bg-white min-h-[30px] w-1/2 p-4 shadow rounded">
         <div class="mb-5">
          <label for="startTime" class="block mb-2 text-sm font-medium text-gray-900 dark:text-dark">Study Day</label>
          <input type="date" id="StudyDate" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required />
        </div>

        <div class="mb-5">
          <label for="startTime" class="block mb-2 text-sm font-medium text-gray-900 dark:text-dark">Start Time</label>
          <input type="time" id="startTime" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required />
        </div>

        <div class="mb-5">
          <label for="endTime" class="block mb-2 text-sm font-medium text-gray-900 dark:text-dark">End Time</label>
          <input type="time" id="endTime" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required />
        </div>

        <button type="submit" id="submitBtn" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Submit</button>
        <div  class="mt-4 bg-gray-100 p-4 rounded" >
        <div id="yourPlanner" class="mb-5"></div>
        <div id="planOutput" ></div>
        </div>
   
        <a href="/startstudy"><button type="submit"  id="buttonStart" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"></button></a>
      </div>
    </div>
  </div>

 <script type="module">
  async function generatePlan(event) {
    event.preventDefault();

    const start = document.getElementById("startTime").value;
    const end = document.getElementById("endTime").value;
    const date = document.getElementById("StudyDate").value;

    const prompt = `Generate an effective study plan starting at ${start} and ending at ${end}. Include study intervals and break suggestions to maximize focus. Split it in between numbers and make as simple as possible ( example : 1. (time) : (session name)) . Just list out the number order only , no need for "great! ill create ..." sentence`;

    const res = await fetch('/api/gemini', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt })
    });

    const data = await res.json();
    const output = data.result || data.error;

    const items = output.split(/\d+\.\s*/).filter(item => item.trim() !== "");

    const cardsHTML = items.map((item, index) => `
      <div class="bg-white rounded-xl shadow p-4 mb-4">
        <h3 class="font-semibold text-gray-800 mb-2">Step ${index + 1}</h3>
        <p class="text-gray-700">${item.trim()}</p>
      </div>
    `).join('');

    document.getElementById("planOutput").innerHTML = cardsHTML;
    document.getElementById("yourPlanner").innerText = "Your planner :";
    document.getElementById("buttonStart").innerText = "Start";

    // ðŸ”§ Save to database AFTER generating and rendering
    const itemsToSave = items.map((item, index) => ({
      stepNumber: index + 1,
      description: item.trim()
    }));

    const username = "test_user"; // ðŸ”§ Replace with actual username logic

    try {
      const saveRes = await fetch('/api/savePlan', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, items: itemsToSave , date })
      });

      const text = await saveRes.text();

      try {
        const saveData = JSON.parse(text);
        console.log("saved items", saveData);
      } catch (parseError) {
        console.error("Failed to parse JSON. Response text:", text);
      }

    } catch (error) {
      console.log("error saving planned items", error);
    }
  }

  // Attach event listener
  document.getElementById("submitBtn").addEventListener("click", generatePlan);
</script>

</Layout>
